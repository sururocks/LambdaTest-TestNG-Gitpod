steps:
- name: 'ubuntu'
  args: ['echo', 'inside ubuntu']
- name: 'busybox'
  entrypoint: 'wget'
  args: ['-O', 'LT_Linux.zip', 'https://downloads.lambdatest.com/tunnel/v3/linux/64bit/LT_Linux.zip']
- name: 'bash'
  args: ['unzip', 'LT_Linux.zip']
- name: 'bash'
  args: ['sh', 'startTunnel.sh']
- name: 'bash'
  args: ['ps', 'aux', '|', 'grep', 'LT']
- name: 'bash'
  args: ['ls']
- name: 'bash'
  args: ['pwd']
- name: 'bash'
  args: ['chmod', '755', 'LT']
- name: 'ubuntu'
  args: ['apt-get', 'update']
- name: gcr.io/cloud-builders/docker
  args: ['run', '-d', '--name=postgres', '--network=cloudbuild', 'postgres']
- name: jwilder/dockerize:0.6.1
  args: ['dockerize', '-timeout=60s', '-wait=tcp://postgres:5432']
# use postgres here
- name: postgres
  args: ['psql', '--host=postgres', '--user=postgres', '--command', 'SELECT * FROM INFORMATION_SCHEMA.Tables']
# cloud-build-local don't clean `docker run -d`-ed container
- name: gcr.io/cloud-builders/docker
  args: ['rm', '--force', 'postgres']
  args: ['./LT', '--user', '${_LT_USERNAME}', '--key', '${_LT_ACCESS_KEY}', '--tunnelName', 'GCloud', '--env', 'prod', '--verbose', '--mitm', '--load-balanced', '&']
#- name: 'ubuntu'
#  args: ['dpkg-reconfigure', 'ca-certificates']
#- name: 'ubuntu'
#  args: ['apt-get', 'install', '-y', 'ca-certificates']
#- name: 'ubuntu'
#  args: ['update-ca-certificates']
- name: 'ubuntu'
  args: ['./LT', '--user', '${_LT_USERNAME}', '--key', '${_LT_ACCESS_KEY}', '--tunnelName', 'GCloud', '--env', 'prod', '--verbose', '--mitm', '--load-balanced', '&']
- name: 'bash'
  args: ['ps', 'aux', '|', 'grep', 'LT']
- name: 'maven'
  entrypoint: 'mvn'
  args: ['test', '-P', 'single']
  env:
  - 'LT_USERNAME=${_LT_USERNAME}'
  - 'LT_ACCESS_KEY=${_LT_ACCESS_KEY}'

